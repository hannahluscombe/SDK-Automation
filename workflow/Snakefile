import pandas as pd
import yaml

configfile: "config/config.yaml"

### 
# Global Constants
###

scenario_path = config["scenario"][config["run"]]
SDKS = pd.read_csv(scenario_path, index_col="country_scenario")
SCENARIOS = SDKS.index.to_list() 

def get_otoole_data(otoole_config: str, var: str) -> list[str]:
    """Gets result files to be created"""

    assert var in ("param", "result", "set")

    with open(otoole_config) as f:
        otoole = yaml.safe_load(f)

    results = [x for x in otoole if otoole[x]["type"] == var]

    missing = [
        "NewStorageCapacity",
        "NumberOfNewTechnologyUnits",
        "SalvageValueStorage",
        "StorageLevelDayTypeStart",
        "StorageLevelDayTypeFinish",
        "StorageLevelSeasonStart",
        "StorageLevelSeasonFinish",
        "StorageLevelYearStart",
        "StorageLevelYearFinish",
        "Trade",
    ]

    return [x for x in results if x not in missing]

OTOOLE_DATA = get_otoole_data(config["otoole"], "param")
OTOOLE_RESULTS = get_otoole_data(config["otoole"], "result")

###
# Rules based on output
###

include: "rules/sdk.smk"
include: "rules/model.smk"
include: "rules/minfin.smk"
include: "rules/emissions.smk"

###
# Global wildcard constarints
###

wildcard_constraints:
    scenario = "|".join([re.escape(x) for x in SCENARIOS]),
    emission_reduction = r"\d+"

###
# Exit conditions
###

rule all:
    input:
        expand("results/{scenario}/results/{csv}.csv",scenario=SCENARIOS, csv=OTOOLE_RESULTS)

rule minfin:
    input:
        expand("results/{scenario}/MinFin/{f}.csv", scenario=SCENARIOS, f=MINFIN_FILES)

rule emission_curves:
    input:
        expand("results/{scenario}/emission_curves/abatement_cost_curve.png", scenario=SCENARIOS)

###
# Helpers
###

rule clean:
    shell:
        "rm -r results/*/" # ignore the .gitkeep

rule make_dag:
    shell:
        "snakemake --dag emission_curves | dot -Tpdf > dag.pdf"